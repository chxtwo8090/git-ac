name: 'Terraform CI/CD' # 이름 변경 (CI에서 CI/CD로)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  plan:
    name: Terraform Validate & Plan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -input=false

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        run: |
          set -e
          terraform plan -no-color -out=tfplan
          terraform show -no-color tfplan > plan.txt
          echo "plan_output<<EOF" >> $GITHUB_OUTPUT
          cat plan.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/plan.txt

      - name: Plan Output (Comment on PR)
        if: github.event_name == 'pull_request' && steps.plan.outputs.plan_output != ''
        uses: actions/github-script@v6
        with:
          script: |
            const output = `#### Terraform Plan 🔎\n\n\`\`\`terraform\n${process.env.PLAN_OUTPUT}\n\`\`\`\n\n(Plan file uploaded as artifact: 'terraform-plan')`
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
        env:
          PLAN_OUTPUT: ${{ steps.plan.outputs.plan_output }}

  apply:
    name: Terraform Apply (only main push)
    runs-on: ubuntu-latest
    needs: plan
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -input=false

      - name: Terraform Apply (infrastructure only)
        working-directory: ./terraform
        run: terraform apply -auto-approve -var="deploy_k8s=false"

  apply-k8s:
    name: Terraform Apply - Kubernetes (after infra)
    runs-on: ubuntu-latest
    needs: apply
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -input=false

      - name: Wait for EKS cluster to become ACTIVE
        working-directory: ./terraform
        run: |
          echo "Waiting for EKS cluster to be ACTIVE..."
          aws eks wait cluster-active --name eks-project-cluster --region ap-northeast-2

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --region ap-northeast-2 --name eks-project-cluster

      - name: Terraform Apply (k8s/Helm)
        working-directory: ./terraform
        run: terraform apply -auto-approve -var="deploy_k8s=true"
