name: 'Terraform CI/CD' # 이름 변경 (CI에서 CI/CD로)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  plan:
    name: Terraform Validate & Plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Restore Terraform cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            terraform/.terraform
          key: ${{ runner.os }}-tf-${{ hashFiles('terraform/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tf-

      - name: Terraform Init
        working-directory: ./terraform
        env:
          TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
        run: |
          mkdir -p ~/.terraform.d/plugin-cache
          terraform init -input=false

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        env:
          # set to 'true' to run a faster plan without refresh (use carefully)
          FAST_PLAN: 'false'
        continue-on-error: true
        run: |
          set -euo pipefail
          # run non-interactively and explicitly load tfvars to avoid prompting
          # FAST_PLAN=true will add -refresh=false to speed up plan (use carefully)
          EXTRA=""
          if [ "${FAST_PLAN}" = "true" ]; then
            EXTRA="-refresh=false"
          fi
          mkdir -p ./terraform
          # run terraform and capture both stdout and stderr to a file while preserving exit code
          terraform plan $EXTRA -input=false -no-color -out=tfplan -var-file=terraform.tfvars 2>&1 | tee ./terraform/plan.txt
          echo ${PIPESTATUS[0]} > ./terraform/plan_exit_code || true
          # if plan produced a binary plan, export a human-readable version (ignore errors)
          terraform show -no-color tfplan > ./terraform/plan.txt || true
          # expose plan output as a step output (first 64kB max)
          echo "plan_output<<EOF" >> $GITHUB_OUTPUT || true
          head -c 65000 ./terraform/plan.txt >> $GITHUB_OUTPUT || true
          echo "EOF" >> $GITHUB_OUTPUT || true

      - name: Upload plan artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/plan.txt

      - name: Check plan result
        if: always()
        working-directory: ./terraform
        run: |
          set -e
          EXIT_CODE=0
          if [ -f ./plan_exit_code ]; then
            EXIT_CODE=$(cat ./plan_exit_code || echo 1)
          else
            # fall back to scanning for 'Error:' in the plan output
            if grep -q "^Error: " ./plan.txt 2>/dev/null; then
              EXIT_CODE=1
            fi
          fi
          if [ "$EXIT_CODE" -ne 0 ]; then
            echo "Terraform plan failed (exit code: $EXIT_CODE). Showing last 200 lines of plan output for debugging:"
            tail -n 200 ./plan.txt || true
            exit $EXIT_CODE
          else
            echo "Terraform plan succeeded (exit code: 0)."
          fi

      - name: Plan Output (Comment on PR)
        if: github.event_name == 'pull_request' && steps.plan.outputs.plan_output != ''
        uses: actions/github-script@v6
        with:
          script: |
            const output = `#### Terraform Plan 🔎\n\n\`\`\`terraform\n${process.env.PLAN_OUTPUT}\n\`\`\`\n\n(Plan file uploaded as artifact: 'terraform-plan')`
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
        env:
          PLAN_OUTPUT: ${{ steps.plan.outputs.plan_output }}

  apply:
    name: Terraform Apply (only main push)
    runs-on: ubuntu-latest
    needs: plan
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    # Note: avoid referencing secrets in top-level job expressions to satisfy workflow validation.

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore Terraform cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            terraform/.terraform
          key: ${{ runner.os }}-tf-${{ hashFiles('terraform/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tf-

      - name: Terraform Init
        working-directory: ./terraform
        env:
          TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
        run: |
          mkdir -p ~/.terraform.d/plugin-cache
          terraform init -input=false

      - name: Terraform Apply (infrastructure only)
        working-directory: ./terraform
        run: terraform apply -input=false -auto-approve -var-file=terraform.tfvars -var="deploy_k8s=false"

  apply-k8s:
    name: Terraform Apply - Kubernetes (after infra)
    runs-on: ubuntu-latest
    needs: apply
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore Terraform cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            terraform/.terraform
          key: ${{ runner.os }}-tf-${{ hashFiles('terraform/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tf-

      - name: Terraform Init
        working-directory: ./terraform
        env:
          TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
        run: |
          mkdir -p ~/.terraform.d/plugin-cache
          terraform init -input=false

      - name: Wait for EKS cluster to become ACTIVE
        working-directory: ./terraform
        run: |
          echo "Waiting for EKS cluster to be ACTIVE..."
          aws eks wait cluster-active --name eks-project-cluster --region ap-northeast-2

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --region ap-northeast-2 --name eks-project-cluster

      - name: Terraform Apply (k8s/Helm)
        working-directory: ./terraform
        run: terraform apply -input=false -auto-approve -var-file=terraform.tfvars -var="deploy_k8s=true"
