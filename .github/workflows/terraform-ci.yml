name: 'Terraform CI/CD'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  plan:
    name: Terraform Validate & Plan
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2️⃣ Terraform 설치
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.GITHUB_TOKEN }}

      # 3️⃣ AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 4️⃣ Terraform 캐시 복원
      - name: Restore Terraform cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            terraform/.terraform
          key: ${{ runner.os }}-tf-${{ hashFiles('terraform/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tf-

      # 5️⃣ kubectl 설치
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      # 6️⃣ EKS kubeconfig 생성
      - name: Configure kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ap-northeast-2 --name ${{ secrets.EKS_CLUSTER_NAME }}
          echo "✅ kubeconfig created at ~/.kube/config"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # 7️⃣ 클러스터 연결 확인
      - name: Check Cluster Connection
        run: kubectl get nodes

      # 8️⃣ Terraform Init
      - name: Terraform Init
        working-directory: ./terraform
        env:
          TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
        run: |
          mkdir -p ~/.terraform.d/plugin-cache
          terraform init -input=false

      # 9️⃣ Terraform Plan
      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan -input=false -var "kubeconfig_path=$HOME/.kube/config"

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: plan
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ap-northeast-2 --name ${{ secrets.EKS_CLUSTER_NAME }}
          echo "✅ kubeconfig created at ~/.kube/config"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve -var "kubeconfig_path=$HOME/.kube/config"
