# AWS Provider 설정 (사용할 AWS 리전 지정)
provider "aws" {
  region = "ap-northeast-2" # 예: 서울 리전. 필요에 따라 변경하세요.
}

# 1. VPC 정의
resource "aws_vpc" "eks_vpc" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "EKS-Project-VPC"
    # EKS 클러스터가 VPC를 인식하도록 태그 추가 (필수)
    "kubernetes.io/cluster/eks-project-cluster" = "owned"
  }
}

# 2. 인터넷 게이트웨이 (IGW): 퍼블릭 서브넷을 인터넷에 연결
resource "aws_internet_gateway" "eks_igw" {
  vpc_id = aws_vpc.eks_vpc.id

  tags = {
    Name = "EKS-Project-IGW"
  }
}

# 3. NAT 게이트웨이 및 EIP: 프라이빗 서브넷이 외부로 나갈 수 있도록 설정
resource "aws_eip" "nat_eip" {
  domain = "vpc"
  # 하나의 EIP만 생성 (프로젝트 규모에 따라 추가 가능)
}

resource "aws_nat_gateway" "eks_nat" {
  allocation_id = aws_eip.nat_eip.id
  # NAT GW는 퍼블릭 서브넷에 위치해야 합니다.
  subnet_id     = aws_subnet.public[0].id

  tags = {
    Name = "EKS-Project-NAT-GW"
  }
}

# 4. 서브넷 정의 (퍼블릭 2개, 프라이빗 2개)
# 이 서브넷들이 EKS 워커 노드를 호스팅하게 됩니다.

# 4-1. 퍼블릭 서브넷 (ALB, NAT Gateway, Bastion Host용)
resource "aws_subnet" "public" {
  count                   = 2 # 가용 영역(AZ) 2개에 배포
  vpc_id                  = aws_vpc.eks_vpc.id
  cidr_block              = cidrsubnet(aws_vpc.eks_vpc.cidr_block, 8, count.index) # 10.0.0.0/24, 10.0.1.0/24
  availability_zone       = data.aws_availability_zones.available.names[count.index]
  map_public_ip_on_launch = true # EC2 생성 시 퍼블릭 IP 자동 할당

  tags = {
    Name = "EKS-Public-Subnet-${count.index + 1}"
    # EKS 클러스터가 서브넷을 인식하도록 태그 추가
    "kubernetes.io/cluster/eks-project-cluster" = "shared"
    "kubernetes.io/role/elb"                    = 1 # ALB 사용을 위한 태그
  }
}

# 4-2. 프라이빗 서브넷 (EKS 파드 및 EC2 워커 노드용)
resource "aws_subnet" "private" {
  count             = 2 # 가용 영역(AZ) 2개에 배포
  vpc_id            = aws_vpc.eks_vpc.id
  cidr_block        = cidrsubnet(aws_vpc.eks_vpc.cidr_block, 8, count.index + 2) # 10.0.2.0/24, 10.0.3.0/24
  availability_zone = data.aws_availability_zones.available.names[count.index]

  tags = {
    Name = "EKS-Private-Subnet-${count.index + 1}"
    "kubernetes.io/cluster/eks-project-cluster" = "shared"
    "kubernetes.io/role/internal-elb"           = 1 # Internal ALB 사용을 위한 태그
  }
}

# 5. 라우팅 테이블 및 연결

# 5-1. 퍼블릭 라우팅 테이블: 인터넷 게이트웨이로 가는 경로 설정
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.eks_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.eks_igw.id
  }

  tags = {
    Name = "EKS-Public-RT"
  }
}

# 5-2. 프라이빗 라우팅 테이블: NAT 게이트웨이로 가는 경로 설정
resource "aws_route_table" "private" {
  count  = 2
  vpc_id = aws_vpc.eks_vpc.id

  route {
    cidr_block     = "0.0.0.0/0"
    # 각 프라이빗 RT는 해당 AZ에 있는 NAT Gateway를 바라봐야 하지만,
    # 여기서는 간단하게 하나의 NAT GW (aws_subnet.public[0].id에 위치)를 사용합니다.
    nat_gateway_id = aws_nat_gateway.eks_nat.id
  }

  tags = {
    Name = "EKS-Private-RT-${count.index + 1}"
  }
}

# 5-3. 서브넷과 라우팅 테이블 연결
resource "aws_route_table_association" "public" {
  count          = 2
  subnet_id      = aws_subnet.public[count.index].id
  route_table_id = aws_route_table.public.id
}

resource "aws_route_table_association" "private" {
  count          = 2
  subnet_id      = aws_subnet.private[count.index].id
  route_table_id = aws_route_table.private[count.index].id
}

# 데이터 소스: 가용 영역 정보를 가져와 서브넷 생성에 사용
data "aws_availability_zones" "available" {
  state = "available"
}
